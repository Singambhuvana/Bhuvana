✈️ FlightFinder Project

🛠️ Backend Development – Complete Guide


---

📌 1. Objective

The backend handles:

Serving data (flights, bookings)

Creating and managing bookings

Storing payment information

Connecting to and managing a relational database (MySQL/PostgreSQL)



---

📁 2. Recommended Folder Structure

server/
├── app.js or app.py or Application.java
├── routes/              # API endpoints
├── controllers/         # Logic for each route
├── models/              # DB schema or data handlers
├── config/              # DB connection, .env
└── .env


---

☕ Java (Spring Boot) Backend Example

📄 Flight.java (Entity)

@Entity
public class Flight {
    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String airline;
    private String source;
    private String destination;
    private String departureTime;
    private String arrivalTime;
    private double price;
    // Getters and Setters
}

📄 FlightRepository.java

@Repository
public interface FlightRepository extends JpaRepository<Flight, Long> {
    List<Flight> findBySourceAndDestination(String source, String destination);
}

📄 FlightController.java

@RestController
@RequestMapping("/api/flights")
public class FlightController {
    @Autowired
    private FlightRepository repo;

    @GetMapping
    public List<Flight> getFlights(@RequestParam String source, @RequestParam String destination) {
        return repo.findBySourceAndDestination(source, destination);
    }

    @PostMapping
    public Flight addFlight(@RequestBody Flight flight) {
        return repo.save(flight);
    }
}


---

🐍 Python (Flask) Backend Example

📄 app.py

from flask import Flask, request, jsonify
from flask_cors import CORS

app = Flask(__name__)
CORS(app)

flights = []

@app.route('/api/flights', methods=['GET'])
def get_flights():
    source = request.args.get('source')
    destination = request.args.get('destination')
    result = [f for f in flights if f['source'] == source and f['destination'] == destination]
    return jsonify(result)

@app.route('/api/flights', methods=['POST'])
def add_flight():
    data = request.json
    flights.append(data)
    return jsonify({"message": "Flight added"}), 201

if __name__ == '__main__':
    app.run(debug=True)


---

🟩 Node.js (Express) Backend Example

📄 server/app.js

const express = require('express');
const cors = require('cors');
require('dotenv').config();
const flightRoutes = require('./routes/flights');

const app = express();
app.use(cors());
app.use(express.json());

app.use('/api/flights', flightRoutes);

app.listen(process.env.PORT || 3000, () => {
    console.log("Server running on port", process.env.PORT);
});


---

📄 routes/flights.js

const express = require('express');
const router = express.Router();
const flightController = require('../controllers/flightController');

router.get('/', flightController.getFlights);
router.post('/', flightController.addFlight);

module.exports = router;


---

📄 controllers/flightController.js

const db = require('../config/db');

exports.getFlights = (req, res) => {
    const { source, destination } = req.query;
    db.query('SELECT * FROM flights WHERE source = ? AND destination = ?', 
        [source, destination], 
        (err, result) => {
            if (err) return res.status(500).send(err);
            res.json(result);
        }
    );
};

exports.addFlight = (req, res) => {
    const { airline, source, destination, departure, arrival, price } = req.body;
    db.query('INSERT INTO flights (airline, source, destination, departure_time, arrival_time, price) VALUES (?, ?, ?, ?, ?, ?)',
        [airline, source, destination, departure, arrival, price],
        (err, result) => {
            if (err) return res.status(500).send(err);
            res.json({ message: 'Flight added successfully' });
        }
    );
};


---

📄 config/db.js

const mysql = require('mysql');
const db = mysql.createConnection({
    host: process.env.DB_HOST,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME
});
db.connect(err => {
    if (err) throw err;
    console.log('Connected to DB');
});
module.exports = db;


---

📑 3. Important API Endpoints

Method	Route	Description

GET	/api/flights	Get flights by source/destination
POST	/api/flights	Add new flight
POST	/api/bookings	Book a flight
POST	/api/payment	Save payment info
GET	/api/bookings/:id	View user bookings



---

🧪 4. Backend Testing Tips

Use Postman to test APIs

Check DB logs to confirm inserts

Use console.log() or print() for debugging

Log all errors and use try/catch or error middleware

🧠 5. Best Practices

Use .env for sensitive configs

Always validate user input

Separate logic (routes, controllers, models)

Use database constraints (foreign keys)

Return clear status messages to frontend
