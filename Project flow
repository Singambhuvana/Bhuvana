✈️ FlightFinder Project

🔃 Extended Project Flow & Setup Documentation


---

📘 1. Purpose of Project Flow

The project flow illustrates the logical and functional path that your application follows — from the moment a user accesses the system to the completion of a booking and payment. It ensures a clean, modular structure and supports team collaboration, testing, and deployment.


---

🧩 2. Core Modules of FlightFinder

Module	Description

Frontend	UI where users search and book flights
Backend	RESTful APIs that handle requests and responses
Database	Stores all data (users, flights, bookings, payments)
Configuration	Environment and database settings
Utilities	Optional helpers (e.g., date formatting, validation)



---

🔄 3. Full Data & Action Flow

👤 User Journey

Open App → Search Flights → Select → Book Flight → Enter Details → Payment → Confirmation

🔁 Internal System Flow

Frontend → API → Backend (Express/Flask) → DB Query → Response → Rendered Output


---

🛠️ 4. Developer Setup (With Sample Commands)

🔹 Node.js (Express Backend)

npm init -y
npm install express cors mysql body-parser dotenv
node app.js

🔹 Python (Flask Backend)

pip install flask flask-cors pymysql
python app.py

🔹 Java (Spring Boot)

Import dependencies in pom.xml:

<dependency>
  <groupId>org.springframework.boot</groupId>
  <artifactId>spring-boot-starter-data-jpa</artifactId>
</dependency>
<dependency>
  <groupId>mysql</groupId>
  <artifactId>mysql-connector-java</artifactId>
</dependency>



---

📁 5. Sample Project Structure Recap

FlightFinder/
├── client/               # Frontend
│   ├── index.html
│   ├── styles.css
│   └── script.js
├── server/               # Backend
│   ├── app.js
│   ├── controllers/
│   ├── models/
│   ├── routes/
│   └── config/
├── database/             # SQL files
├── .env
└── README.md


---

🧬 6. Functional API Flow (With Logic)

🔸 Flight Search

Route: GET /api/flights

Logic:

Read source and destination from query params

Query flights table

Return JSON list of flights



🔸 Flight Booking

Route: POST /api/bookings

Logic:

Validate input

Store in bookings table

Generate booking ID

Return booking confirmation



🔸 Payment Process

Route: POST /api/payment

Logic:

Read booking ID, amount, method

Store in payments table

Link to booking

Return payment status




---

🌐 7. Visual Project Flow (Text-Based)

[User Interface]  
    ↓  
[Search Flights] → GET /api/flights  
    ↓  
[Show Results]  
    ↓  
[Book Now] → POST /api/bookings  
    ↓  
[Enter Passenger Details]  
    ↓  
[Payment Form] → POST /api/payment  
    ↓  
[Show Confirmation]


---

🔍 8. Testing Flow – Postman Example

Action	Method	URL	Sample Body/Query

Search Flights	GET	/api/flights	?source=Hyd&destination=Delhi
Book a Flight	POST	/api/bookings	{ "name": "Bhuvana", "flightId": 2 }
Make Payment	POST	/api/payment	{ "bookingId": 1, "amount": 4000 }
Get Bookings	GET	/api/bookings/:userId	No body required

🧠 9. Internal Logic Breakdown

Layer	Function	Example File

Frontend	Collect user input	index.html, script.js
Backend	Process request, connect DB	flightController.js
Routes	Define API endpoints	flightRoutes.js
Model	DB schema / mock data	flightModel.js
DB	Stores persistent data	flight, booking tables


🧾 10. Environment Configuration Sample

.env

PORT=3000
DB_HOST=localhost
DB_USER=root
DB_PASSWORD=admin123
DB_NAME=flightfinder

🚀 11. Deployment Ready Flow (Optional)

1. Push code to GitHub


2. Use platforms like:

Railway / Render → For backend (Node.js)

Vercel / Netlify → For frontend



3. Connect MySQL via Railway DB or PlanetScale


4. Add .env settings in deploy panel


✅ 12. Final Summary: Project Flow Recap

Phase	Tool/Technology	Description

UI Interaction	HTML/CSS/JS	Collects and shows user input
API Calls	JavaScript (fetch)	Sends/receives data
API Logic	Node/Flask/Spring	Handles logic & DB interaction
Data Storage	MySQL/PostgreSQL	Saves all app data
Testing	Postman / Console Logs	Validates every function
Deployment	Railway, Render, Vercel	Hosting the project online
